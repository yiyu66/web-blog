(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{419:function(t,s,n){"use strict";n.r(s);var e=n(2),a=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"懒加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#懒加载"}},[t._v("#")]),t._v(" 懒加载")]),t._v(" "),s("p",[t._v("当用户滚动相应可视区域，若可视区域有图片便加载，而在可视区域外未加载过的图片它们先不加载，可以提升应用性能，减少白屏时间")]),t._v(" "),s("blockquote",[s("ol",[s("li",[t._v('loading="lazy"')]),t._v(" "),s("li",[t._v("Element.getBoundingClientRect()")]),t._v(" "),s("li",[t._v("IntersectionObserver")])])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在一开始加载的时候")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("img data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("src"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://xx.com/xx.png"')]),t._v(" src"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在进入可视范围内时")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("img data"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("src"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://xx.com/xx.png"')]),t._v(" src"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"http://xx.com/xx.png"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("offsetTop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("documentElement"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scrollTop "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" viewPortHeight\nel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBoundingClientReact")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("top "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" viewPortHeight\n")])])]),s("h2",{attrs:{id:"判断元素是否在可视区域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断元素是否在可视区域"}},[t._v("#")]),t._v(" 判断元素是否在可视区域")]),t._v(" "),s("h3",{attrs:{id:"getboundingclientrect"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getboundingclientrect"}},[t._v("#")]),t._v(" getBoundingClientRect")]),t._v(" "),s("blockquote",[s("p",[t._v("Element.getBoundingClientRect() 方法返回元素的大小及其相对于视口的位置。")])]),t._v(" "),s("p",[t._v("如果一个元素在视窗之内的话，那么它一定满足下面四个条件：")]),t._v(" "),s("p",[t._v("top 大于等于 0\nleft 大于登录 0\nbottom 小于等于视窗高度\nright 小于等于视窗宽度")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" target "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.target'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" clientRect "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getBoundingClientRect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// log data")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("clientRect"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   bottom: 556.21875,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   height: 393.59375,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   left: 333,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   right: 1017,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   top: 162.625,")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   width: 684")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// }")]),t._v("\n")])])]),s("p",[t._v("传统的实现方法是，监听到scroll事件后，调用目标元素（绿色方块）的getBoundingClientRect()方法，得到它对应于视口左上角的坐标，再判断是否在视口之内。这种方法的缺点是，由于scroll事件密集发生，计算量很大，容易造成性能问题。")]),t._v(" "),s("h3",{attrs:{id:"intersectionobserver"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#intersectionobserver"}},[t._v("#")]),t._v(" IntersectionObserver")]),t._v(" "),s("p",[t._v('由于可见（visible）的本质是，目标元素与视口产生一个交叉区，所以这个 API 叫做"交叉观察器"。')]),t._v(" "),s("p",[s("code",[t._v("var io = new IntersectionObserver(callback, option);")]),t._v("\n上面代码中，IntersectionObserver是浏览器原生提供的构造函数，接受两个参数：callback是可见性变化时的回调函数，option是配置对象（该参数可选）。")]),t._v(" "),s("p",[t._v("构造函数的返回值是一个观察器实例。实例的observe方法可以指定观察哪个 DOM 节点。")]),t._v(" "),s("p",[t._v("// 开始观察\nio.observe(document.getElementById('example'));")]),t._v(" "),s("p",[t._v("// 停止观察\nio.unobserve(element);")]),t._v(" "),s("p",[t._v("// 关闭观察器\nio.disconnect();\n上面代码中，observe的参数是一个 DOM 节点对象。如果要观察多个节点，就要多次调用这个方法。")]),t._v(" "),s("p",[t._v("io.observe(elementA);\nio.observe(elementB);")]),t._v(" "),s("h2",{attrs:{id:"懒加载对性能的影响"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#懒加载对性能的影响"}},[t._v("#")]),t._v(" 懒加载对性能的影响")]),t._v(" "),s("p",[t._v("许多研究表明，开发者通过懒加载可以实现两种优势。")]),t._v(" "),s("p",[s("strong",[t._v("减少页面加载时间（PLT）")]),t._v("：通过延迟资源加载减少首屏页面加载时间。\n"),s("strong",[t._v("优化资源消耗")]),t._v("：通过资源懒加载优化系统资源使用，这在内存以及处理能力较低的移动设备上效果比较好。\n在另一方面，过度使用懒加载会对性能产生一些明显的影响。")]),t._v(" "),s("h3",{attrs:{id:"缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),s("p",[s("strong",[t._v("减慢快速滚动的速度")]),t._v("\n如果你有一个 Web 应用，比如在线商店，你需要让用户可以快速上下滚动以及导航。对这样的应用使用懒加载会减慢滚动速度，因为我们需要等待数据加载完成。这会降低应用性能以及引发用户体验问题。")]),t._v(" "),s("p",[s("strong",[t._v("因为内容变化而导致的延迟")]),t._v("\n如果你还没有为懒加载的图片定义的 width 和 height 属性，那么在图片渲染过程中会出现明显的延迟。因为资源在页面初始化时没有加载，浏览器不知道适用于页面布局的内容尺寸。")]),t._v(" "),s("p",[t._v("一旦内容加载完成，而用户滚动到特定视图中，浏览器需要处理内容以及再一次改变页面布局。这会使其他元素移位，也会带来糟糕的用户体验。")]),t._v(" "),s("p",[s("strong",[t._v("内容缓冲")]),t._v("\n如果你在应用中使用非必要的懒加载，这会导致内容缓冲。当用户快速向下滚动而资源却还在下载中时会发生这种情况。尤其是带宽连接较慢时会发生这种情况，这会影响网页渲染速度。")])])}),[],!1,null,null,null);s.default=a.exports}}]);