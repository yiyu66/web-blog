(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{413:function(s,t,a){"use strict";a.r(t);var e=a(2),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"css预处理器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css预处理器"}},[s._v("#")]),s._v(" css预处理器")]),s._v(" "),t("p",[s._v("sass\nless\nstylus")]),s._v(" "),t("h2",{attrs:{id:"特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#特性"}},[s._v("#")]),s._v(" 特性")]),s._v(" "),t("p",[s._v("变量（variables）\n作用域（scope）\n代码混合（mixins）\n嵌套（nested rules）\n代码模块化（Modules）")]),s._v(" "),t("h2",{attrs:{id:"代码混入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码混入"}},[s._v("#")]),s._v(" 代码混入")]),s._v(" "),t("p",[s._v("混入（mixin）应该说是预处理器最精髓的功能之一了，简单点来说，Mixins可以将一部分样式抽出，作为单独定义的模块，被很多选择器重复使用")]),s._v(" "),t("p",[s._v("可以在Mixins中定义变量或者默认参数")]),s._v(" "),t("p",[s._v("在less中，混合的用法是指将定义好的ClassA中引入另一个已经定义的Class，也能使用够传递参数，参数变量为@声明")])])}),[],!1,null,null,null);t.default=n.exports}}]);